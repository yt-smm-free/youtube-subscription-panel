<%- include('../layout', { showNav: true }) %>

<div class="admin-users">
    <div class="users-header">
        <h2 class="glitch-text">Manage Users</h2>
        <div class="users-actions">
            <a href="/auth/generate-link" class="btn btn-primary" id="generate-link">Generate Login Link</a>
            <button class="btn btn-success" id="authorize-all-users">Authorize All Users</button>
            <a href="/abc/xxx/dashboard" class="btn btn-secondary">Back to Dashboard</a>
        </div>
    </div>
    
    <div class="users-stats">
        <div class="stat-card">
            <div class="stat-icon">
                <svg viewBox="0 0 24 24" width="32" height="32">
                    <path fill="#00ff00" d="M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z"/>
                </svg>
            </div>
            <div class="stat-content">
                <h3>Total Users</h3>
                <p class="stat-value"><%= users.length %></p>
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon">
                <svg viewBox="0 0 24 24" width="32" height="32">
                    <path fill="#00ff00" d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                </svg>
            </div>
            <div class="stat-content">
                <h3>Authorized Users</h3>
                <p class="stat-value"><%= users.filter(user => user.isAuthorized).length %></p>
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon">
                <svg viewBox="0 0 24 24" width="32" height="32">
                    <path fill="#00ff00" d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14h-2V9h-2V7h4v10z"/>
                </svg>
            </div>
            <div class="stat-content">
                <h3>Success Rate</h3>
                <p class="stat-value">
                    <%= users.length > 0 ? Math.round((users.filter(user => user.isAuthorized).length / users.length) * 100) : 0 %>%
                </p>
            </div>
        </div>
    </div>
    
    <div class="users-section">
        <div class="terminal-table">
            <div class="terminal-header">
                <span class="terminal-button red"></span>
                <span class="terminal-button yellow"></span>
                <span class="terminal-button green"></span>
                <span class="terminal-title">user_database</span>
            </div>
            <div class="terminal-body">
                <div class="table-filters">
                    <input type="text" id="user-search" placeholder="Search users..." class="search-input">
                    <div class="filter-buttons">
                        <button class="filter-btn active" data-filter="all">All</button>
                        <button class="filter-btn" data-filter="authorized">Authorized</button>
                        <button class="filter-btn" data-filter="unauthorized">Unauthorized</button>
                    </div>
                </div>
                
                <table class="data-table" id="users-table">
                    <thead>
                        <tr>
                            <th>Login ID</th>
                            <th>Name</th>
                            <th>Status</th>
                            <th>Subscriptions</th>
                            <th>Last Login</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (users && users.length > 0) { %>
                            <% users.forEach(function(user) { %>
                                <tr class="user-row <%= user.isAuthorized ? 'authorized' : 'unauthorized' %>">
                                    <td><span class="login-id"><%= user.loginId %></span></td>
                                    <td><%= user.name || 'Not Authorized' %></td>
                                    <td>
                                        <span class="status-badge status-<%= user.isAuthorized ? 'completed' : 'pending' %>">
                                            <%= user.isAuthorized ? 'Authorized' : 'Pending' %>
                                        </span>
                                    </td>
                                    <td><%= user.subscriptionHistory ? user.subscriptionHistory.length : 0 %></td>
                                    <td><%= user.lastLogin ? new Date(user.lastLogin).toLocaleDateString() : 'Never' %></td>
                                    <td>
                                        <button class="btn btn-small btn-secondary view-user" data-id="<%= user.loginId %>">View</button>
                                        <button class="btn btn-small <%= user.isAuthorized ? 'btn-danger' : 'btn-success' %> toggle-auth" 
                                                data-id="<%= user.loginId %>" 
                                                data-status="<%= user.isAuthorized %>">
                                            <%= user.isAuthorized ? 'Revoke' : 'Authorize' %>
                                        </button>
                                        <button class="btn btn-small btn-danger delete-user" data-id="<%= user.loginId %>">Delete</button>
                                    </td>
                                </tr>
                            <% }); %>
                        <% } else { %>
                            <tr>
                                <td colspan="6" class="no-data">No users found</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- <div id="link-modal" class="modal">
    <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h3>Login Link Generated</h3>
        <div class="terminal-mini">
            <div class="terminal-header">
                <span class="terminal-button red"></span>
                <span class="terminal-button yellow"></span>
                <span class="terminal-button green"></span>
                <span class="terminal-title">login_link</span>
            </div>
            <div class="terminal-body">
                <div class="line">$ <span class="command">generating_secure_link</span></div>
                <div class="line">$ <span class="response">Link generated successfully...</span></div>
                <div class="line">$ <span class="command">link_details</span></div>
                <div class="line">$ <span class="response" id="login-link-display">...</span></div>
                <div class="line">$ <span class="cursor"></span></div>
            </div>
        </div>
        <div class="link-actions">
            <button id="copy-link" class="btn btn-secondary">Copy Link</button>
        </div>
    </div>
</div> -->

<div id="user-modal" class="modal">
    <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h3>User Details</h3>
        <div class="terminal-mini">
            <div class="terminal-header">
                <span class="terminal-button red"></span>
                <span class="terminal-button yellow"></span>
                <span class="terminal-button green"></span>
                <span class="terminal-title">user_details</span>
            </div>
            <div class="terminal-body">
                <div id="user-details-content">
                    <div class="line">$ <span class="command">loading_user_data</span></div>
                    <div class="line">$ <span class="response">Please wait...</span></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Generate link functionality
        const generateLinkBtn = document.getElementById('generate-link');
        const linkModal = document.getElementById('link-modal');
        const closeLinkModal = linkModal.querySelector('.close-modal');
        const copyLinkBtn = document.getElementById('copy-link');
        const loginLinkDisplay = document.getElementById('login-link-display');
        
        // User details modal
        const userModal = document.getElementById('user-modal');
        const closeUserModal = userModal.querySelector('.close-modal');
        const userDetailsContent = document.getElementById('user-details-content');
        
        // Table filtering
        const searchInput = document.getElementById('user-search');
        const filterButtons = document.querySelectorAll('.filter-btn');
        const userRows = document.querySelectorAll('.user-row');
        
        // Generate link
        generateLinkBtn.addEventListener('click', function(e) {
            e.preventDefault();
            
            fetch('/auth/generate-link')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        loginLinkDisplay.textContent = data.loginLink;
                        linkModal.style.display = 'block';
                    } else {
                        alert('Failed to generate login link: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while generating the login link');
                });
        });
        
        // Close link modal
        closeLinkModal.addEventListener('click', function() {
            linkModal.style.display = 'none';
        });
        
        // Copy link
        copyLinkBtn.addEventListener('click', function() {
            const tempInput = document.createElement('input');
            tempInput.value = loginLinkDisplay.textContent;
            document.body.appendChild(tempInput);
            tempInput.select();
            document.execCommand('copy');
            document.body.removeChild(tempInput);
            
            copyLinkBtn.textContent = 'Copied!';
            setTimeout(() => {
                copyLinkBtn.textContent = 'Copy Link';
            }, 2000);
        });
        
        // View user details
        document.querySelectorAll('.view-user').forEach(button => {
            button.addEventListener('click', function() {
                const loginId = this.getAttribute('data-id');
                
                // Clear previous content and show loading
                userDetailsContent.innerHTML = `
                    <div class="line">$ <span class="command">loading_user_data</span></div>
                    <div class="line">$ <span class="response">Please wait...</span></div>
                `;
                
                userModal.style.display = 'block';
                
                // Fetch user data
                fetch(`/user/profile/${loginId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const profile = data.profile;
                            
                            // Fetch subscription history
                            return fetch(`/user/subscriptions/${loginId}`)
                                .then(response => response.json())
                                .then(subData => {
                                    if (subData.success) {
                                        return {
                                            profile: profile,
                                            subscriptions: subData.subscriptions
                                        };
                                    } else {
                                        throw new Error(subData.message);
                                    }
                                });
                        } else {
                            throw new Error(data.message);
                        }
                    })
                    .then(userData => {
                        // Display user data
                        let content = `
                            <div class="line">$ <span class="command">user_profile</span></div>
                            <div class="line">$ <span class="response">Login ID: ${loginId}</span></div>
                            <div class="line">$ <span class="response">Name: ${userData.profile.name || 'Not Authorized'}</span></div>
                            <div class="line">$ <span class="response">Status: ${userData.profile.isAuthorized ? 'Authorized' : 'Pending'}</span></div>
                        `;
                        
                        if (userData.profile.isAuthorized) {
                            content += `
                                <div class="line">$ <span class="command">subscription_history</span></div>
                            `;
                            
                            if (userData.subscriptions && userData.subscriptions.length > 0) {
                                userData.subscriptions.forEach((sub, index) => {
                                    content += `
                                        <div class="line">$ <span class="response">${index + 1}. ${sub.channelName} - ${sub.success ? 'Success' : 'Failed'} - ${new Date(sub.subscribedAt).toLocaleString()}</span></div>
                                    `;
                                });
                            } else {
                                content += `
                                    <div class="line">$ <span class="response">No subscription history found</span></div>
                                `;
                            }
                        }
                        
                        userDetailsContent.innerHTML = content;
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        userDetailsContent.innerHTML = `
                            <div class="line">$ <span class="command">error</span></div>
                            <div class="line">$ <span class="response error-text">Failed to load user data: ${error.message}</span></div>
                        `;
                    });
            });
        });
        
        // Close user modal
        closeUserModal.addEventListener('click', function() {
            userModal.style.display = 'none';
        });
        
        // Authorize All Users functionality
        const authorizeAllBtn = document.getElementById('authorize-all-users');
        authorizeAllBtn.addEventListener('click', function() {
            if (confirm('Are you sure you want to authorize ALL pending users? This will allow them to participate in subscription campaigns.')) {
                // Show loading state
                const originalText = authorizeAllBtn.textContent;
                authorizeAllBtn.textContent = 'Authorizing...';
                authorizeAllBtn.disabled = true;
                
                fetch('/abc/xxx/users/authorize-all', {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(`Success: ${data.message}`);
                        location.reload();
                    } else {
                        alert(`Error: ${data.message}`);
                        authorizeAllBtn.textContent = originalText;
                        authorizeAllBtn.disabled = false;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while authorizing users');
                    authorizeAllBtn.textContent = originalText;
                    authorizeAllBtn.disabled = false;
                });
            }
        });
        
        // Toggle individual user authorization
        document.querySelectorAll('.toggle-auth').forEach(button => {
            button.addEventListener('click', function() {
                const loginId = this.getAttribute('data-id');
                const currentStatus = this.getAttribute('data-status') === 'true';
                const action = currentStatus ? 'revoke' : 'authorize';
                
                if (confirm(`Are you sure you want to ${action} this user's authorization?`)) {
                    // Show loading state
                    const originalText = this.textContent;
                    this.textContent = `${action === 'authorize' ? 'Authorizing' : 'Revoking'}...`;
                    this.disabled = true;
                    
                    fetch(`/abc/xxx/users/${loginId}/toggle-auth`, {
                        method: 'POST'
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert(`Success: User ${data.isAuthorized ? 'authorized' : 'unauthorized'} successfully`);
                            location.reload();
                        } else {
                            alert(`Error: ${data.message}`);
                            this.textContent = originalText;
                            this.disabled = false;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert(`An error occurred while ${action === 'authorize' ? 'authorizing' : 'revoking'} the user`);
                        this.textContent = originalText;
                        this.disabled = false;
                    });
                }
            });
        });
        
        // Delete user functionality
        document.querySelectorAll('.delete-user').forEach(button => {
            button.addEventListener('click', function() {
                const loginId = this.getAttribute('data-id');
                
                if (confirm(`Are you sure you want to DELETE this user? This action cannot be undone.`)) {
                    // Show loading state
                    const originalText = this.textContent;
                    this.textContent = 'Deleting...';
                    this.disabled = true;
                    
                    fetch(`/abc/xxx/users/${loginId}/delete`, {
                        method: 'POST'
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert(`Success: User deleted successfully`);
                            location.reload();
                        } else {
                            alert(`Error: ${data.message}`);
                            this.textContent = originalText;
                            this.disabled = false;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert(`An error occurred while deleting the user`);
                        this.textContent = originalText;
                        this.disabled = false;
                    });
                }
            });
        });
        
        // Search functionality
        searchInput.addEventListener('input', filterUsers);
        
        // Filter buttons
        filterButtons.forEach(button => {
            button.addEventListener('click', function() {
                filterButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
                filterUsers();
            });
        });
        
        function filterUsers() {
            const searchTerm = searchInput.value.toLowerCase();
            const activeFilter = document.querySelector('.filter-btn.active').getAttribute('data-filter');
            
            userRows.forEach(row => {
                const loginId = row.querySelector('.login-id').textContent.toLowerCase();
                const name = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
                const isAuthorized = row.classList.contains('authorized');
                
                const matchesSearch = loginId.includes(searchTerm) || name.includes(searchTerm);
                let matchesFilter = true;
                
                if (activeFilter === 'authorized') {
                    matchesFilter = isAuthorized;
                } else if (activeFilter === 'unauthorized') {
                    matchesFilter = !isAuthorized;
                }
                
                row.style.display = matchesSearch && matchesFilter ? '' : 'none';
            });
        }
        
        // Close modals when clicking outside
        window.addEventListener('click', function(event) {
            if (event.target === linkModal) {
                linkModal.style.display = 'none';
            }
            if (event.target === userModal) {
                userModal.style.display = 'none';
            }
        });
    });
</script>